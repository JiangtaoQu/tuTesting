{"title": "微信小程序开发需要注意的一些规范 ", "author": "Rolan", "pub_time": "2019-5-5 00:42", "article_content": ["出现", "JavaScript", "异常可能导致小程序的交互无法进行下去，我们应当追求零异常，保证小程序的高鲁棒性和高可用性，相信这一点一般情况下都不会出现，需要注意的是代码测试中多场景的试错。2.合理控制图片的大小图片太大会增加下载时间和内存的消耗，应根据显示区域大小合理控制图片大小。", "一般情况下图片较大的，我们应该都会选择直接放在服务器上，直接拿到地址，但是官方说这样读取的图片：", "存在网络图片资源未开启", "HTTP", "缓存控制", ",这是个什么意思，我也未完全弄懂。3.小程序所有请求应响应正常请求失败可能导致小程序的交互无法进行下去，应当保证所有请求都能成功。然而，请求成功只是第一步，还可能存在的问题就是请求的耗时太长、存在短时间内发起太多的请求这样的情况，一方面是后台人员的接口写的烂，一方面就是需求使然（技术半吊子，还想安全的产品经理会有这种让你去指定地方请求的情况），比如在阿里云OSS存储的一些json数据。。。。4.避免setData的数据过大且避免setData的调用过于频繁。由于小程序运行逻辑线程与渲染线程之上，setData的调用会把数据从逻辑层传到渲染层，数据太大会增加通信时间.", "setData接口的调用涉及逻辑层与渲染层间的线程通过，通信过于频繁可能导致处理队列阻塞，界面渲染不及时而导致卡顿，应避免无用的频繁调用.5.避免将未绑定在", "WXML", "的变量传入", "setDatasetData操作会引起框架处理一些渲染界面相关的工作，一个未绑定的变量意味着与界面渲染无关，传入setData会造成不必要的性能消耗。", "这一条我想是很多开发人员在初次接触小程序开发的时候都会犯的一个错误吧。因为刚开始的时候由于这种setData的语法，让我们忘了还有全局变量的使用，于是会经常出现使用Page中定义的data做中间过渡。6.wxss", "覆盖率较高，较少或没有引入未被使用的样式我们应该按需引入", "wxss", "资源，如果小程序中存在大量未使用的样式，会增加小程序包体积大小，从而在一定程度上影响加载速度。", "这个也是比较常见的一种不规范，写了很多CSS样式，很多不用的就留来了代码里面，越来越多，所以在编写代码过程中，尽量去对每一行代码（特别是自己写的）了如指掌。7.避免首屏时间太长的情况首屏时间是指用户开始看到第一屏的内容的时间，首屏时间太长会导致用户长时间看到的都是白屏，会一直等待有意义的内容展示出来。出现这一情况，应仔细检查这个过程都有哪个操作，一般来说，可能是请求数据的时间太长，或者是一次渲染的数据太大导致渲染时间太长。这些东西是我感觉比较常见且容易修改的，其它还存在一些规范，不妨打开微信开发者工具，点击", "Audits", ",对你写的代码进行一个测试，测试结果会让你很好的处理自己的代码。That's", "really", "cool!"]}
{"title": "微信小程序怎么使用icon ", "author": "Rolan", "pub_time": "2019-4-30 00:21", "article_content": ["小程序怎么使用icon第一步", "下载icon我选择的图标库是阿里图标官网，", "加入购物车第二步", "转换ttf因为小程序的wxss文件的font-face的url不接受http地址作为参数,但可以接受base64,因此需将字体文件下载后,转换为base64，然后引用进入https://transfonter.org/平台点击Add", "fonts，添加iconfont.ttf勾选Base64", "encode点击", "convert", "完成转换按照上图1,2,3的步骤", "转换完成，", "点击Download第三步", "在微信小程序中使用icon解压", "第二步中的文件夹找到stylesheet.css", "文件打开第一步中压缩包的iconfont.css，把里面圈红的部分（即fontface部分我们不需要啦）复制到stylesheet.css修改后的stylesheet.css修改stylesheet.css的文件后缀为wxss，即stylesheet.wxss把stylesheet.wxss放进微信小程序的公共文件里面，然后把整个文件import到页面的样式表里在wxml页面引入使用完结"]}
{"title": "微信小程序生命周期与性能指标 ", "author": "Rolan", "pub_time": "2019-5-5 00:47", "article_content": ["本文将介绍微信小程序整个App的生命周期、单个页面的生命周期和组件的生命周期，并研究了这三个元素生命周期的关系，这在学习和开发过程中对理解小程序运行机制有重要意义。最终，由生命周期整理出小程序的关键指标，仅供参考。App的生命周期在app.js中有其生命周期相关的三个方法：onLaunch、onShow和onHide。首先是onLaunch，这是整个小程序的第一个生命周期回调函数，在小程序初始化完成后调用。接着，小程序将触发onShow事件，如果小程序从后台切回前台后也会触发该事件。最后，是小程序切到后台的事件onHide。Page的生命周期在每个页面注册函数Page()的参数中，有生命周期的方法：onLoad、onShow、onReady、onHide、onUnload。页面触发的第一个生命周期回调是onLoad，在页面加载的时候触发，其参数是页面的query参数，一个页面只有一次；接着是onShow，监听页面的显示，与onLoad不同，如果页面被隐藏后再次显示（例如：进入下一页后返回），也会触发该生命周期；触发onShow之后，逻辑层会向渲染层发送初始化数据，渲染层完成第一次渲染之后，会通知逻辑层触发onReady生命周期，一个页面只有一次；onHide是页面隐藏但未卸载的时候触发的，如", "wx.navigateTo", "或底部tab切换到其他页面，小程序切入后台等。onUnload是页面卸载时触发，如wx.redirectTo或wx.navigateBack到其他页面时。Component的生命周期组件最重要的生命周期是created、attached、detached", "，包含一个组件实例生命流程的最主要时间点。首先，当组件实例刚被创建时，", "created生命周期被触发。此时，还不能调用setData", "。", "通常情况下，这个生命周期只应该用于给组件this添加一些自定义属性字段。接着，在组件完全初始化完毕并且进入页面节点树后，", "attached生命周期被触发。此时，", "this.data", "已被初始化为组件的当前值，绝大多数初始化工作可以在这个时机进行。在组件离开页面节点树后，", "detached生命周期被触发。退出一个页面时，如果组件还在页面节点树中，则", "detached", "会被触发。此外，组件生命周期还有ready和move生命周期，分别在视图层布局完成和组件实例被移动到节点树另一个位置时执行。整体周期现在我们知道了App、Page、和Component分别的生命周期顺序，那么他们之间的生命周期顺序又是如何？通过开发一个简单的demo，观察运行结果，可以得到如下结论：打开页面的情况首先，前一个页面隐藏，在加载下一个页面之前，需要先初始化新页面的组件。页面首次渲染之后，会触发组件的ready，最后触发的是页面的onReady，如下图：从PageA打开pageB时的生命周期顺序离开页面的情况离开当前页面时，首先触发当前页面的卸载onUnload，接着是组件离开节点树的detached。最后显示之前的页面，触发onShow。如下图：从PageB返回到PageA的生命周期顺序打开App的情况App、Page与Component生命周期运行顺序，先从App加载然后再加载Page，在加载Page之前会先初始化该页面所用的所有组件，之后才触发页面的onLoad生命周期，如下图：打开App时的生命周期顺序切换到后台切换到后台时，小程序和页面并没有卸载，只会触发隐藏。先触发页面的onHide，接着是App的onHide。如下图：切换到后台时的生命周期顺序切换到前台切换到后台时，小程序会先触发onShow，之后才是页面的onShow。如下图：切换到前台时的生命周期顺序关键性能指标了解了小程序各个阶段的生命周期，我们可以制定出关键节点的性能指标，整理如下表：参考文档官方文档", "Page：developers.weixin.qq.com/miniprogram…官方文档", "App：developers.weixin.qq.com/miniprogram…官方文档", "页面生命周期：developers.weixin.qq.com/miniprogram…官方文档", "组件生命周期：developers.weixin.qq.com/miniprogram…"]}
{"title": "手把手教你写一个微信小程序日历组件 ", "author": "Rolan", "pub_time": "2019-5-6 00:24", "article_content": ["今天我们一起写一个微信小程序日历组件", "微信小程序日历组件", "github.com/749264345/w…", "好，我们先看一下要实现的模样，如下图", "由以上截图我们可以看到", "1.日历可以通过按钮【切换展示效果】改变日历的呈现效果，上图是平铺模式，下图是收起滚动模式。", "2.通过点击具体的日期可以在页面上显示当前选中的具体日期。", "3.点击【今天】快速回到当日视图。", "4.点击【◀】和【▶】切换月份。", "上面的四点也是基本的交互需求，我们马上开始。", "首先，我们先结构后样式，做出最基本的界面结构", "这边我们把整体结构分成上中下，操作显示区，星期显示区，日期显示区。", "<view", "class='calendar'>", "<!--显示当前年月日-->", "<view", "class='calendar-title'>", "<view", "class='item", "ctrl'", "bindtap='lastMonth'>{{lastMonth}}</view>", "<view", "class='item", "title'>{{title}}</view>", "<view", "class='item", "ctrl'", "bindtap='nextMonth'>{{nextMonth}}</view>", "<view", "class='item", "ctrl", "today'", "bindtap='today'>今天</view>", "</view>", "<!--星期-->", "<view", "class='calendar-week'>", "<view", "class='item'>{{item}}</view>", "</view>", "<!--日期-->", "<view", "class='calendar-container'>", "<!--上个月占位格子-->", "<view", "class='grid", "gray'>{{item}}</view>", "<!--当月格子-->", "<view", "class='grid'>", "<view", "class=\"wrap\">{{item.date}}</view>", "</view>", "<!--下个月占位格子-->", "<view", "class='grid", "gray'>{{item}}</view>", "</view>", "</view>", "复制代码这是我们基本的日历结构，机智的小伙伴已经从布局中知道我们实现的大致逻辑了，是的，我们先获取当月有多少天，上月和下月有多少天，这样我们的日历就出来了。好，慢慢来，下面我们详细说，我们先写上基本的样式。", ".calendar", "{", "width:", "100%;", "text-align:", "center;", "font-size:", "30rpx;", "box-sizing:", "border-box;", "}", "/*", "标题", "*/", ".calendar-title", "{", "line-height:", "70rpx;", "font-size:", "30rpx;", "text-align:", "left;", "padding:", "0", "20rpx;", "box-sizing:", "border-box;", "}", ".calendar-title", ".ctrl", "{", "display:", "inline-block;", "padding:", "0", "20rpx;", "background:", "#f5f5f5;", "border-radius:", "10rpx;", "}", ".calendar-title", ".item", "{", "display:", "inline-block;", "vertical-align:", "middle;", "line-height:", "50rpx;", "}", ".calendar-title", ".title", "{", "min-width:", "300rpx;", "text-align:", "center;", "}", ".calendar-title", ".today", "{", "float:", "right;", "margin-top:", "10rpx;", "}", "/*", "星期", "*/", ".calendar-week", "{", "display:", "flex;", "text-align:", "center;", "padding:", "20rpx", "10rpx;", "box-sizing:", "border-box;", "border-top:", "1rpx", "solid", "#e0e0e0;", "border-bottom:", "1rpx", "solid", "#e0e0e0;", "background:", "#f5f5f5;", "}", ".calendar-week", ".item", "{", "flex:", "1;", "}", "/*", "日期", "*/", ".calendar-container", "{", "display:", "flex;", "flex-wrap:", "wrap;", "padding:", "20rpx", "10rpx;", "box-sizing:", "border-box;", "}", ".calendar-container", ".grid", "{", "display:", "inline-block;", "width:", "14.28571428571429%;", "line-height:", "70rpx;", "position:", "relative;", "z-index:", "1;", "}", ".calendar-container", ".grid.gray", "{", "color:", "#ccc;", "}", ".calendar-container", ".grid", ".wrap.select", "{", "background:", "rgb(49,", "120,", "228);", "border-radius:", "10rpx;", "color:", "#fff;", "width:", "80%;", "margin:", "0", "auto;", "}", "复制代码以上我们基本试下了日历的界面，下面我们来实现星期和日期的展示。", "好，我们先显示星期，我们先在组件中定义一个数组，用来遍历显示星期的标题；", "Component({", "properties:", "{", "//星期数组", "weekText:", "{", "type:", "Array,", "value:", "['周日',", "'周一',", "'周二',", "'周三',", "'周四',", "'周五',", "'周六']", "}", "},", "...", "})", "复制代码我们将星期的标题定义为可配置的模式，默认显示如上的文字，之后我们可以在组件外自定义，个性化显示。于是我们调整下wxml的代码。", "<!--遍历星期-->", "<view", "class='calendar-week'>", "<view", "wx:for='{{weekText}}'", "class='item'", "wx:key='{{item}}'>{{item}}</view>", "</view>", "复制代码这样我们就能看到我们想要的效果。", "下面我们开始日期的显示，我们先获取当月有几天，这里的核心代码是", "new", "Date(year,", "month,", "date).getDate();", "由此我们做如下尝试", "我们如期获得了返回值，而当我们传入日期为0时返回了31为当月的全部天数。", "由于JavaScript中day的范围为1~31中的值，所以当设为0时，会向前", "一天，也即表示上个月的最后一天，通过这种方式可以得到每个月份的天数。", "知道了获取当月天数的原理，我们还需要知道当月1号是星期几。", "我们使用如下的方法：", "new", "Date(Date.UTC(year,", "month-1,", "date)).getDay();", "我们同样在控制台做出调试；", "需要注意的是，上面的month是实际的月份，而下面这个方法需要在实际的月份上减去1。", "于是我们获取0-6之间的值，分别对应周日~周六。", "值为6是周六，值为0是周日。", "由于日历的第一天是周日，周日对应的是0，于是传入每月1日，返回值为多少，就是星期几，也就说明当月1日前面空几格。", "知道了当月就几天，当月前面有几天，我们做一下算法就可以得出，当月后面有几天，于是我们建立如下函数：", "//", "组件的初始数据", "data:", "{", "//当月格子", "thisMonthDays:", "[],", "//上月格子", "empytGridsBefore:", "[],", "//下月格子", "empytGridsAfter:", "[],", "},", "methods:", "{", "//获取当月天数", "getThisMonthDays:", "function", "(year,", "month)", "{", "return", "new", "Date(year,", "month,", "0).getDate();", "},", "//", "绘制当月天数占的格子", "createDays:", "function", "(year,", "month)", "{", "let", "thisMonthDays", "=", "[],", "days", "=", "this.getThisMonthDays(year,", "month);", "for", "(let", "i", "=", "1;", "i", "<=", "days;", "i++)", "{", "thisMonthDays.push({", "date:", "i,", "dateFormat:", "this.zero(i),", "monthFormat:", "this.zero(month),", "week:", "this.data.weekText[new", "Date(Date.UTC(year,", "month", "-", "1,", "i)).getDay()]", "});", "}", "this.setData({", "thisMonthDays", "})", "},", "//获取当月空出的天数", "createEmptyGrids:", "function", "(year,", "month)", "{", "let", "week", "=", "new", "Date(Date.UTC(year,", "month", "-", "1,", "1)).getDay(),", "empytGridsBefore", "=", "[],", "empytGridsAfter", "=", "[],", "emptyDays", "=", "(week", "==", "0", "?", "7", ":", "week);", "//当月天数", "var", "thisMonthDays", "=", "this.getThisMonthDays(year,", "month);", "//上月天数", "var", "preMonthDays", "=", "month", "-", "1", "<", "0", "?", "this.getThisMonthDays(year", "-", "1,", "12)", ":", "this.getThisMonthDays(year,", "month", "-", "1);", "//空出日期", "for", "(let", "i", "=", "1;", "i", "<=", "emptyDays;", "i++)", "{", "empytGridsBefore.push(preMonthDays", "-", "(emptyDays", "-", "i));", "}", "var", "after", "=", "(42", "-", "thisMonthDays", "-", "emptyDays)", "-", "7", ">=", "0", "?", "(42", "-", "thisMonthDays", "-", "emptyDays)", "-", "7", ":", "(42", "-", "thisMonthDays", "-", "emptyDays);", "for", "(let", "i", "=", "1;", "i", "<=", "after;", "i++)", "{", "empytGridsAfter.push(i);", "}", "this.setData({", "empytGridsAfter,", "empytGridsBefore", "})", "},", "//补全0", "zero:", "function", "(i)", "{", "return", "i", ">=", "10", "?", "i", ":", "'0'", "+", "i;", "},", "}", "复制代码我们同样修改下wxml代码，同时我们为上月，下月，今天，三个按钮添加相关事件监听。", "<!--显示当前年月日-->", "<view", "class='calendar-title'>", "<view", "class='item", "ctrl'", "bindtap='lastMonth'>{{lastMonth}}</view>", "<view", "class='item", "title'>{{title}}</view>", "<view", "class='item", "ctrl'", "bindtap='nextMonth'>{{nextMonth}}</view>", "<view", "class='item", "ctrl", "today'", "bindtap='today'>今天</view>", "</view>", "复制代码<!--上个月占位格子-->", "<view", "class='grid", "gray'", "wx:for='{{empytGridsBefore}}'", "wx:key='{{item}}'>{{item}}</view>", "<!--当月格子-->", "<view", "class='grid'", "wx:for='{{thisMonthDays}}'", "wx:key='{{indx}}'>", "<view", "class='self'", "wx:if=\"{{", "format", "===", "year+'-'+item.monthFormat+'-'+item.dateFormat", "}}\"></view>", "<view", "class=\"wrap", "{{", "select", "===", "year+'-'+item.monthFormat+'-'+item.dateFormat", "?", "'select'", ":''}}\"", "bindtap='select'", "data-date='{{item.date}}'>{{item.date}}</view>", "</view>", "<!--下个月占位格子-->", "<view", "class='grid", "gray'", "wx:for='{{empytGridsAfter}}'", "wx:key='{{item}}'>{{item}}</view>", "复制代码相关的事件监听：", "//默认选中当天", "并初始化组件", "today:", "function", "()", "{", "let", "DATE", "=", "this.data.defaultValue", "?", "new", "Date(this.data.defaultValue)", ":", "new", "Date(),", "year", "=", "DATE.getFullYear(),", "month", "=", "DATE.getMonth()", "+", "1,", "date", "=", "DATE.getDate(),", "select", "=", "year", "+", "'-'", "+", "this.zero(month)", "+", "'-'", "+", "this.zero(date);", "this.setData({", "format:", "select,", "select:", "select,", "year:", "year,", "month:", "month,", "date:", "date,", "YEAR:", "year,", "MONTH:", "month,", "DATE:", "date,", "})", "//初始化日历组件UI", "this.display(year,", "month,", "date);", "//发送事件监听", "this.triggerEvent('select',", "select);", "},", "//上个月", "lastMonth:", "function", "()", "{", "let", "month", "=", "this.data.month", "==", "1", "?", "12", ":", "this.data.month", "-", "1;", "let", "year", "=", "this.data.month", "==", "1", "?", "this.data.year", "-", "1", ":", "this.data.year;", "//初始化日历组件UI", "this.display(year,", "month,", "0);", "},", "//下个月", "nextMonth:", "function", "()", "{", "let", "month", "=", "this.data.month", "==", "12", "?", "1", ":", "this.data.month", "+", "1;", "let", "year", "=", "this.data.month", "==", "12", "?", "this.data.year", "+", "1", ":", "this.data.year;", "//初始化日历组件UI", "this.display(year,", "month,", "0);", "},", "复制代码代码中我们使用this.display(year,", "month,", "0)为组件统一初始化；", "同时在today函数中我们添加事件监听函数，将选中的日期发送到页面，我们通过事件订阅来获取的相关值。", "<Calendar", "id=\"Calendar\"", "bind:select=\"select\"></Calendar>", "复制代码//组件监听事件", "select(e)", "{", "this.setData({", "selectVal:e.detail", "})", "},", "复制代码最后我们为切换显示效果的按钮添加事件：", "toggleType(){", "this.selectComponent('#Calendar').toggleType();", "}", "复制代码组件中对应的方法，每当切换展示效果，组件都需要初始化", "//切换展示", "toggleType(){", "this.setData({", "toggleType:", "this.data.toggleType", "==", "'mini'", "?", "'large'", ":'mini'", "})", "//初始化日历组件UI", "this.display(this.data.year,", "this.data.month,", "this.data.date);", "},", "复制代码以上基本上是小程序日历组件实现的基本逻辑，介于篇幅太长还有很多实现上的细节不在此一一细说，大家可以移步我的github", "微信小程序日历组件", "github.com/749264345/w…", "上文中有不足之处，请给出建议或更优的实现方案，谢谢~", "最后祝大家五一快乐~~"]}
{"title": "微信小程序---支付密码的输入框 ", "author": "Rolan", "pub_time": "2019-5-6 00:51", "article_content": ["效果如下：干货：<view", "class=\"pay\"><view", "class=\"title\">支付方式</view><view", "catchtap=\"wx_pay\"", "class=\"wx_pay\"><i", "class=\"icon", "{{payment_mode==1?'active':''}}\"", "type=\"String\"></i><text>微信支付</text></view><view", "catchtap=\"offline_pay\"", "class=\"offline_pay\"><i", "class=\"icon", "{{payment_mode==0?'active':''}}\"", "type=\"String\"></i><text>对公打款</text></view><block", "wx:if=\"{{balance!=0}}\"><view", "catchtap=\"wallet_pay\"", "class=\"wallet_pay\"><i", "class=\"icon", "{{payment_mode==2?'active':''}}\"", "type=\"String\"></i><text>钱包支付(余额:{{balance/100}}元)</text></view></block><block", "wx:if=\"{{balance==0}}\"><view", "class=\"wallet_pay\"><i", "class=\"icon\"", "type=\"String\"", "style=\"background:#e8e8e8;border:none;\"></i><text", "style=\"color:#999\">钱包支付(余额不足)</text></view></block></view><view", "catchtap=\"pay\"", "class=\"save\">确定</view><!--输入钱包密码--><view", "wx:if=\"{{wallets_password_flag}}\"", "class=\"wallets-password\"><view", "class=\"input-content-wrap\"><view", "class=\"top\"><view", "catchtap=\"close_wallets_password\"", "class=\"close\">×</view><view", "class=\"txt\">请输入支付密码</view><view", "catchtap=\"modify_password\"", "class=\"forget\">忘记密码</view></view><view", "class=\"actual_fee\"><span>￥</span><text>{{actual_fee/100}}</text></view><view", "catchtap=\"set_Focus\"", "class=\"input-password-wrap\"><view", "class=\"password_dot\"><i", "wx:if=\"{{wallets_password.length>=1}}\"></i></view><view", "class=\"password_dot\"><i", "wx:if=\"{{wallets_password.length>=2}}\"></i></view><view", "class=\"password_dot\"><i", "wx:if=\"{{wallets_password.length>=3}}\"></i></view><view", "class=\"password_dot\"><i", "wx:if=\"{{wallets_password.length>=4}}\"></i></view><view", "class=\"password_dot\"><i", "wx:if=\"{{wallets_password.length>=5}}\"></i></view><view", "class=\"password_dot\"><i", "wx:if=\"{{wallets_password.length>=6}}\"></i></view></view></view><input", "bindinput=\"set_wallets_password\"", "class=\"input-content\"", "password", "type=\"number\"", "focus=\"{{isFocus}}\"", "maxlength=\"6\"", "/></view>//index.jsPage({", "data:", "{", "payment_mode:", "1,//默认支付方式", "微信支付", "isFocus:", "false,//控制input", "聚焦", "balance:100,//余额", "actual_fee:20,//待支付", "wallets_password_flag:false//密码输入遮罩", "},", "//事件处理函数", "onLoad:", "function", "()", "{", "},", "wx_pay()", "{//转换为微信支付", "this.setData({", "payment_mode:", "1", "})", "},", "offline_pay()", "{//转换为转账支付", "this.setData({", "payment_mode:", "0", "})", "},", "wallet_pay()", "{", "this.setData({//转换为钱包支付", "payment_mode:", "2", "})", "},", "set_wallets_password(e)", "{//获取钱包密码", "this.setData({", "wallets_password:", "e.detail.value", "});", "if", "(this.data.wallets_password.length", "==", "6)", "{//密码长度6位时，自动验证钱包支付结果", "wallet_pay(this)", "}", "},", "set_Focus()", "{//聚焦input", "console.log('isFocus',", "this.data.isFocus)", "this.setData({", "isFocus:", "true", "})", "},", "set_notFocus()", "{//失去焦点", "this.setData({", "isFocus:", "false", "})", "},", "close_wallets_password", "()", "{//关闭钱包输入密码遮罩", "this.setData({", "isFocus:", "false,//失去焦点", "wallets_password_flag:", "false,", "})", "},", "pay()", "{//去支付", "pay(this)", "}})/*-----------------------------------------------*//*支付*/function", "pay(_this)", "{", "let", "apikey", "=", "_this.data.apikey;", "let", "id", "=", "_this.data.id;", "let", "payment_mode", "=", "_this.data.payment_mode", "if", "(payment_mode", "==", "1)", "{", "//", "微信支付", "//", "微信自带密码输入框", "console.log('微信支付')", "}", "else", "if", "(payment_mode", "==", "0)", "{", "//", "转账支付", "后续跳转至传转账单照片", "console.log('转账支付')", "}", "else", "if", "(payment_mode", "==", "2)", "{", "//", "钱包支付", "输入密码", "console.log('钱包支付')", "_this.setData({", "wallets_password_flag:", "true,", "isFocus:", "true", "})", "}}//", "钱包支付function", "wallet_pay(_this)", "{", "console.log('钱包支付请求函数')", "/*", "1.支付成功", "2.支付失败：提示；清空密码；自动聚焦isFocus:true，拉起键盘再次输入", "*/}index.wxsspage", "{", "height:", "100%;", "width:", "100%;", "background:", "#e8e8e8;}page", ".pay", "{", "display:", "flex;", "flex-direction:", "column;", "background:", "#fff;}page", ".pay", ".title", "{", "height:", "90rpx;", "line-height:", "90rpx;", "font-size:", "28rpx;", "color:", "#353535;", "padding:", "0", "23rpx;", "border-bottom:", "1rpx", "solid", "#ddd;", "box-sizing:", "border-box;}page", ".pay", ".wx_pay,", "page", ".pay", ".offline_pay,", "page", ".pay", ".wallet_pay", "{", "margin:", "0", "26rpx;", "height:", "90rpx;", "line-height:", "90rpx;", "border-bottom:", "2rpx", "solid", "#ddd;", "box-sizing:", "border-box;", "display:", "flex;", "align-items:", "center;", "justify-content:", "flex-start;}page", ".pay", ".wx_pay", ".icon,", "page", ".pay", ".offline_pay", ".icon,page", ".pay", ".wallet_pay", ".icon", "{", "width:", "34rpx;", "height:", "34rpx;", "border:", "2rpx", "solid", "#ddd;", "box-sizing:", "border-box;", "border-radius:", "50%;}page", ".pay", ".wx_pay", ".icon.active,", "page", ".pay", ".offline_pay", ".icon.active,page", ".pay", ".wallet_pay", ".icon.active", "{", "border:", "10rpx", "solid", "#00a2ff;}page", ".pay", ".wx_pay", "text,", "page", ".pay", ".offline_pay", "text,", "page", ".pay", ".wallet_pay", "text", "{", "margin-left:", "20rpx;", "color:", "#353535;", "font-size:", "26rpx;}page", ".pay", ".wallet_pay", "{", "border:", "0;", "border-top:", "2rpx", "solid", "#ddd;}page", ".pay", ".offline_pay", "{", "border:", "0", "none;}page", ".save", "{", "margin:", "80rpx", "23rpx;", "color:", "#fff;", "background:", "#00a2ff;", "height:", "88rpx;", "line-height:", "88rpx;", "text-align:", "center;", "font-size:", "30rpx;", "border-radius:", "10rpx;}page", ".wallets-password", "{", "position:", "absolute;", "left:", "0;", "top:", "0;", "width:", "100%;", "height:", "100%;", "background:", "rgba(0,", "0,", "0,", "0.6);}page", ".wallets-password", ".input-content-wrap", "{", "position:", "absolute;", "top:", "200rpx;", "left:", "50%;", "display:", "flex;", "flex-direction:", "column;", "width:", "600rpx;", "margin-left:", "-300rpx;", "background:", "#fff;", "border-radius:", "20rpx;}page", ".wallets-password", ".input-content-wrap", ".top", "{", "display:", "flex;", "align-items:", "center;", "height:", "90rpx;", "border-bottom:", "2rpx", "solid", "#ddd;", "justify-content:", "space-around;}page", ".wallets-password", ".input-content-wrap", ".top", ".close", "{", "font-size:", "44rpx;", "color:", "#999;", "font-weight:", "100;}page", ".wallets-password", ".input-content-wrap", ".top", ".forget", "{", "color:", "#00a2ff;", "font-size:", "22rpx;}page", ".wallets-password", ".input-content-wrap", ".actual_fee", "{", "display:", "flex;", "align-items:", "center;", "justify-content:", "center;", "color:", "#000;", "height:", "100rpx;", "margin:", "0", "23rpx;", "border-bottom:", "2rpx", "solid", "#ddd;}page", ".wallets-password", ".input-content-wrap", ".actual_fee", "span", "{", "font-size:", "24rpx;}page", ".wallets-password", ".input-content-wrap", ".actual_fee", "text", "{", "font-size:", "36rpx;}page", ".wallets-password", ".input-content-wrap", ".input-password-wrap", "{", "display:", "flex;", "align-items:", "center;", "justify-content:", "center;", "height:", "150rpx;}page", ".wallets-password", ".input-content-wrap", ".input-password-wrap", ".password_dot", "{", "display:", "flex;", "align-items:", "center;", "justify-content:", "center;", "text-align:", "center;", "color:", "#000;", "box-sizing:", "border-box;", "width:", "90rpx;", "height:", "90rpx;", "border:", "2rpx", "solid", "#ddd;", "border-left:", "none", "0;}page", ".wallets-password", ".input-content-wrap", ".input-password-wrap", ".password_dot:nth-child(1)", "{", "border-left:", "2rpx", "solid", "#ddd;}page", ".wallets-password", ".input-content-wrap", ".input-password-wrap", ".password_dot", "i", "{", "background:", "#000;", "border-radius:", "50%;", "width:", "20rpx;", "height:", "20rpx;}page", ".wallets-password", ".input-content", "{", "position:", "absolute;", "opacity:", "0;", "left:", "-100%;", "top:", "600rpx;", "background:", "#f56;", "z-index:", "-999;}page", ".wallets-password", ".input-content.active", "{", "z-index:", "-99;}github地址：-\">https://github.com/fiveTree/--"]}
